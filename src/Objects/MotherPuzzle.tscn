[gd_scene load_steps=61 format=2]

[ext_resource path="res://src/Objects/MotherPuzzle/ConnectorsShapes/TShapeConnector.tscn" type="PackedScene" id=1]
[ext_resource path="res://src/Objects/MotherPuzzle/ConnectorsShapes/LShapeConnector.tscn" type="PackedScene" id=2]
[ext_resource path="res://assets/fonts/712_serif.ttf" type="DynamicFontData" id=3]
[ext_resource path="res://src/Objects/MotherPuzzle/InterestPoints/EnergyOut.tscn" type="PackedScene" id=4]
[ext_resource path="res://assets/fonts/basis33.ttf" type="DynamicFontData" id=5]
[ext_resource path="res://src/Objects/MotherPuzzle/InterestPoints/EnergyIn.tscn" type="PackedScene" id=6]
[ext_resource path="res://src/Objects/MotherPuzzle/ConnectorsShapes/Shapes/LShape.tscn" type="PackedScene" id=7]
[ext_resource path="res://src/Objects/MotherPuzzle/ConnectorsShapes/Shapes/LineShape.tscn" type="PackedScene" id=8]
[ext_resource path="res://src/Objects/MotherPuzzle.gd" type="Script" id=9]
[ext_resource path="res://assets/sprites/ui/text_panel.png" type="Texture" id=10]
[ext_resource path="res://assets/sprites/ui/background_panel.png" type="Texture" id=11]
[ext_resource path="res://assets/sprites/ui/head_bar.png" type="Texture" id=12]
[ext_resource path="res://assets/sprites/ui/connectors.png" type="Texture" id=13]

[sub_resource type="StyleBoxEmpty" id=4]

[sub_resource type="AtlasTexture" id=5]
atlas = ExtResource( 13 )
region = Rect2( 0, 96, 16, 16 )

[sub_resource type="AtlasTexture" id=6]
atlas = ExtResource( 13 )
region = Rect2( 48, 32, 16, 16 )

[sub_resource type="SpriteFrames" id=7]
animations = [ {
"frames": [ SubResource( 5 ) ],
"loop": true,
"name": "charged",
"speed": 5.0
}, {
"frames": [ SubResource( 6 ) ],
"loop": true,
"name": "discharged",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=8]
script/source = "extends AnimatedSprite

var is_charged: bool = false
var transmitter1_charged: bool = false
var transmitter2_charged: bool = false

onready var receiver1: RayCast2D = $EnergyReceiver1
onready var receiver2: RayCast2D = $EnergyReceiver2


# charged feedback
func verify_energy() -> void:
	if is_charged:
		animation = \"charged\"


# verify if the shape is charged
func _physics_process(_delta: float) -> void:
	transmitter1_charged = is_receiver_charged(receiver1)

	transmitter2_charged = is_receiver_charged(receiver2)

	is_charged = transmitter1_charged or transmitter2_charged


func is_receiver_charged(receiver: RayCast2D) -> bool:
	if receiver.is_colliding():
		var shape: Node = receiver.get_collider().get_parent()
		return shape.is_charged
	
	else:
		return false


func reset() -> void:
	animation = \"discharged\"
	transmitter1_charged = false
	transmitter2_charged = false
	is_charged = false
"

[sub_resource type="AtlasTexture" id=9]
atlas = ExtResource( 13 )
region = Rect2( 48, 80, 16, 16 )

[sub_resource type="AtlasTexture" id=10]
atlas = ExtResource( 13 )
region = Rect2( 32, 32, 16, 16 )

[sub_resource type="SpriteFrames" id=11]
animations = [ {
"frames": [ SubResource( 9 ) ],
"loop": true,
"name": "charged",
"speed": 5.0
}, {
"frames": [ SubResource( 10 ) ],
"loop": true,
"name": "discharged",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=12]
script/source = "extends AnimatedSprite

var is_charged: bool = false
var transmitter1_charged: bool = false
var transmitter2_charged: bool = false

onready var receiver1: RayCast2D = $EnergyReceiver1
onready var receiver2: RayCast2D = $EnergyReceiver2


# charged feedback
func verify_energy() -> void:
	if is_charged:
		animation = \"charged\"


# verify if the shape is charged
func _physics_process(_delta: float) -> void:
	transmitter1_charged = is_receiver_charged(receiver1)

	transmitter2_charged = is_receiver_charged(receiver2)

	is_charged = transmitter1_charged or transmitter2_charged


func is_receiver_charged(receiver: RayCast2D) -> bool:
	if receiver.is_colliding():
		var shape: Node = receiver.get_collider().get_parent()
		return shape.is_charged
	
	else:
		return false


func reset() -> void:
	animation = \"discharged\"
	transmitter1_charged = false
	transmitter2_charged = false
	is_charged = false
"

[sub_resource type="AtlasTexture" id=13]
atlas = ExtResource( 13 )
region = Rect2( 32, 80, 16, 16 )

[sub_resource type="AtlasTexture" id=14]
atlas = ExtResource( 13 )
region = Rect2( 16, 32, 16, 16 )

[sub_resource type="SpriteFrames" id=15]
animations = [ {
"frames": [ SubResource( 13 ) ],
"loop": true,
"name": "charged",
"speed": 5.0
}, {
"frames": [ SubResource( 14 ) ],
"loop": true,
"name": "discharged",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=16]
script/source = "extends AnimatedSprite

var is_charged: bool = false
var transmitter1_charged: bool = false
var transmitter2_charged: bool = false

onready var receiver1: RayCast2D = $EnergyReceiver1
onready var receiver2: RayCast2D = $EnergyReceiver2


# charged feedback
func verify_energy() -> void:
	if is_charged:
		animation = \"charged\"


# verify if the shape is charged
func _physics_process(_delta: float) -> void:
	transmitter1_charged = is_receiver_charged(receiver1)

	transmitter2_charged = is_receiver_charged(receiver2)

	is_charged = transmitter1_charged or transmitter2_charged


func is_receiver_charged(receiver: RayCast2D) -> bool:
	if receiver.is_colliding():
		var shape: Node = receiver.get_collider().get_parent()
		return shape.is_charged
	
	else:
		return false


func reset() -> void:
	animation = \"discharged\"
	transmitter1_charged = false
	transmitter2_charged = false
	is_charged = false
"

[sub_resource type="AtlasTexture" id=17]
atlas = ExtResource( 13 )
region = Rect2( 16, 80, 16, 16 )

[sub_resource type="AtlasTexture" id=18]
atlas = ExtResource( 13 )
region = Rect2( 0, 32, 16, 16 )

[sub_resource type="SpriteFrames" id=19]
animations = [ {
"frames": [ SubResource( 17 ) ],
"loop": true,
"name": "charged",
"speed": 5.0
}, {
"frames": [ SubResource( 18 ) ],
"loop": true,
"name": "discharged",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=20]
script/source = "extends AnimatedSprite

var is_charged: bool = false
var transmitter1_charged: bool = false
var transmitter2_charged: bool = false

onready var receiver1: RayCast2D = $EnergyReceiver1
onready var receiver2: RayCast2D = $EnergyReceiver2


# charged feedback
func verify_energy() -> void:
	if is_charged:
		animation = \"charged\"


# verify if the shape is charged
func _physics_process(_delta: float) -> void:
	transmitter1_charged = is_receiver_charged(receiver1)

	transmitter2_charged = is_receiver_charged(receiver2)

	is_charged = transmitter1_charged or transmitter2_charged


func is_receiver_charged(receiver: RayCast2D) -> bool:
	if receiver.is_colliding():
		var shape: Node = receiver.get_collider().get_parent()
		return shape.is_charged
	
	else:
		return false


func reset() -> void:
	animation = \"discharged\"
	transmitter1_charged = false
	transmitter2_charged = false
	is_charged = false
"

[sub_resource type="AtlasTexture" id=21]
atlas = ExtResource( 13 )
region = Rect2( 0, 96, 16, 16 )

[sub_resource type="AtlasTexture" id=22]
atlas = ExtResource( 13 )
region = Rect2( 48, 32, 16, 16 )

[sub_resource type="SpriteFrames" id=23]
animations = [ {
"frames": [ SubResource( 21 ) ],
"loop": true,
"name": "charged",
"speed": 5.0
}, {
"frames": [ SubResource( 22 ) ],
"loop": true,
"name": "discharged",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=24]
script/source = "extends AnimatedSprite

var is_charged: bool = false
var transmitter1_charged: bool = false
var transmitter2_charged: bool = false

onready var receiver1: RayCast2D = $EnergyReceiver1
onready var receiver2: RayCast2D = $EnergyReceiver2


# charged feedback
func verify_energy() -> void:
	if is_charged:
		animation = \"charged\"


# verify if the shape is charged
func _physics_process(_delta: float) -> void:
	transmitter1_charged = is_receiver_charged(receiver1)

	transmitter2_charged = is_receiver_charged(receiver2)

	is_charged = transmitter1_charged or transmitter2_charged


func is_receiver_charged(receiver: RayCast2D) -> bool:
	if receiver.is_colliding():
		var shape: Node = receiver.get_collider().get_parent()
		return shape.is_charged
	
	else:
		return false


func reset() -> void:
	animation = \"discharged\"
	transmitter1_charged = false
	transmitter2_charged = false
	is_charged = false
"

[sub_resource type="AtlasTexture" id=25]
atlas = ExtResource( 13 )
region = Rect2( 0, 80, 16, 16 )

[sub_resource type="AtlasTexture" id=26]
atlas = ExtResource( 13 )
region = Rect2( 48, 16, 16, 16 )

[sub_resource type="SpriteFrames" id=27]
animations = [ {
"frames": [ SubResource( 25 ) ],
"loop": true,
"name": "charged",
"speed": 5.0
}, {
"frames": [ SubResource( 26 ) ],
"loop": true,
"name": "discharged",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=28]
script/source = "extends AnimatedSprite

var is_charged: bool = false
var transmitter1_charged: bool = false
var transmitter2_charged: bool = false

onready var receiver1: RayCast2D = $EnergyReceiver1
onready var receiver2: RayCast2D = $EnergyReceiver2


# charged feedback
func verify_energy() -> void:
	if is_charged:
		animation = \"charged\"


# verify if the shape is charged
func _physics_process(_delta: float) -> void:
	transmitter1_charged = is_receiver_charged(receiver1)

	transmitter2_charged = is_receiver_charged(receiver2)

	is_charged = transmitter1_charged or transmitter2_charged


func is_receiver_charged(receiver: RayCast2D) -> bool:
	if receiver.is_colliding():
		var shape: Node = receiver.get_collider().get_parent()
		return shape.is_charged
	
	else:
		return false


func reset() -> void:
	animation = \"discharged\"
	transmitter1_charged = false
	transmitter2_charged = false
	is_charged = false
"

[sub_resource type="AtlasTexture" id=29]
atlas = ExtResource( 13 )
region = Rect2( 0, 80, 16, 16 )

[sub_resource type="AtlasTexture" id=30]
atlas = ExtResource( 13 )
region = Rect2( 48, 16, 16, 16 )

[sub_resource type="SpriteFrames" id=31]
animations = [ {
"frames": [ SubResource( 29 ) ],
"loop": true,
"name": "charged",
"speed": 5.0
}, {
"frames": [ SubResource( 30 ) ],
"loop": true,
"name": "discharged",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=32]
script/source = "extends AnimatedSprite

var is_charged: bool = false
var transmitter1_charged: bool = false
var transmitter2_charged: bool = false

onready var receiver1: RayCast2D = $EnergyReceiver1
onready var receiver2: RayCast2D = $EnergyReceiver2


# charged feedback
func verify_energy() -> void:
	if is_charged:
		animation = \"charged\"


# verify if the shape is charged
func _physics_process(_delta: float) -> void:
	transmitter1_charged = is_receiver_charged(receiver1)

	transmitter2_charged = is_receiver_charged(receiver2)

	is_charged = transmitter1_charged or transmitter2_charged


func is_receiver_charged(receiver: RayCast2D) -> bool:
	if receiver.is_colliding():
		var shape: Node = receiver.get_collider().get_parent()
		return shape.is_charged
	
	else:
		return false


func reset() -> void:
	animation = \"discharged\"
	transmitter1_charged = false
	transmitter2_charged = false
	is_charged = false
"

[sub_resource type="AtlasTexture" id=33]
atlas = ExtResource( 13 )
region = Rect2( 0, 80, 16, 16 )

[sub_resource type="SpriteFrames" id=34]
animations = [ {
"frames": [ SubResource( 33 ) ],
"loop": true,
"name": "charged",
"speed": 5.0
}, {
"frames": [ SubResource( 30 ) ],
"loop": true,
"name": "discharged",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=35]
script/source = "extends AnimatedSprite

var is_charged: bool = false
var transmitter1_charged: bool = false
var transmitter2_charged: bool = false

onready var receiver1: RayCast2D = $EnergyReceiver1
onready var receiver2: RayCast2D = $EnergyReceiver2


# charged feedback
func verify_energy() -> void:
	if is_charged:
		animation = \"charged\"


# verify if the shape is charged
func _physics_process(_delta: float) -> void:
	transmitter1_charged = is_receiver_charged(receiver1)

	transmitter2_charged = is_receiver_charged(receiver2)

	is_charged = transmitter1_charged or transmitter2_charged


func is_receiver_charged(receiver: RayCast2D) -> bool:
	if receiver.is_colliding():
		var shape: Node = receiver.get_collider().get_parent()
		return shape.is_charged
	
	else:
		return false


func reset() -> void:
	animation = \"discharged\"
	transmitter1_charged = false
	transmitter2_charged = false
	is_charged = false
"

[sub_resource type="AtlasTexture" id=36]
atlas = ExtResource( 13 )
region = Rect2( 0, 64, 16, 16 )

[sub_resource type="AtlasTexture" id=37]
atlas = ExtResource( 13 )
region = Rect2( 48, 0, 16, 16 )

[sub_resource type="SpriteFrames" id=38]
animations = [ {
"frames": [ SubResource( 36 ) ],
"loop": true,
"name": "charged",
"speed": 5.0
}, {
"frames": [ SubResource( 37 ) ],
"loop": true,
"name": "discharged",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=39]
script/source = "extends AnimatedSprite

var is_charged: bool = false
var transmitter1_charged: bool = false
var transmitter2_charged: bool = false

onready var receiver1: RayCast2D = $EnergyReceiver1
onready var receiver2: RayCast2D = $EnergyReceiver2


# charged feedback
func verify_energy() -> void:
	if is_charged:
		animation = \"charged\"


# verify if the shape is charged
func _physics_process(_delta: float) -> void:
	transmitter1_charged = is_receiver_charged(receiver1)

	transmitter2_charged = is_receiver_charged(receiver2)

	is_charged = transmitter1_charged or transmitter2_charged


func is_receiver_charged(receiver: RayCast2D) -> bool:
	if receiver.is_colliding():
		var shape: Node = receiver.get_collider().get_parent()
		return shape.is_charged
	
	else:
		return false


func reset() -> void:
	animation = \"discharged\"
	transmitter1_charged = false
	transmitter2_charged = false
	is_charged = false
"

[sub_resource type="AtlasTexture" id=40]
atlas = ExtResource( 13 )
region = Rect2( 48, 64, 16, 16 )

[sub_resource type="AtlasTexture" id=41]
atlas = ExtResource( 13 )
region = Rect2( 32, 16, 16, 16 )

[sub_resource type="SpriteFrames" id=42]
animations = [ {
"frames": [ SubResource( 40 ) ],
"loop": true,
"name": "charged",
"speed": 5.0
}, {
"frames": [ SubResource( 41 ) ],
"loop": true,
"name": "discharged",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=43]
script/source = "extends AnimatedSprite

var is_charged: bool = false
var transmitter1_charged: bool = false
var transmitter2_charged: bool = false

onready var receiver1: RayCast2D = $EnergyReceiver1
onready var receiver2: RayCast2D = $EnergyReceiver2


# charged feedback
func verify_energy() -> void:
	if is_charged:
		animation = \"charged\"


# verify if the shape is charged
func _physics_process(_delta: float) -> void:
	transmitter1_charged = is_receiver_charged(receiver1)

	transmitter2_charged = is_receiver_charged(receiver2)

	is_charged = transmitter1_charged or transmitter2_charged


func is_receiver_charged(receiver: RayCast2D) -> bool:
	if receiver.is_colliding():
		var shape: Node = receiver.get_collider().get_parent()
		return shape.is_charged
	
	else:
		return false


func reset() -> void:
	animation = \"discharged\"
	transmitter1_charged = false
	transmitter2_charged = false
	is_charged = false
"

[sub_resource type="AtlasTexture" id=44]
atlas = ExtResource( 13 )
region = Rect2( 48, 64, 16, 16 )

[sub_resource type="AtlasTexture" id=45]
atlas = ExtResource( 13 )
region = Rect2( 32, 16, 16, 16 )

[sub_resource type="SpriteFrames" id=46]
animations = [ {
"frames": [ SubResource( 44 ) ],
"loop": true,
"name": "charged",
"speed": 5.0
}, {
"frames": [ SubResource( 45 ) ],
"loop": true,
"name": "discharged",
"speed": 5.0
} ]

[sub_resource type="GDScript" id=47]
script/source = "extends AnimatedSprite

var is_charged: bool = false
var transmitter1_charged: bool = false
var transmitter2_charged: bool = false

onready var receiver1: RayCast2D = $EnergyReceiver1
onready var receiver2: RayCast2D = $EnergyReceiver2


# charged feedback
func verify_energy() -> void:
	if is_charged:
		animation = \"charged\"


# verify if the shape is charged
func _physics_process(_delta: float) -> void:
	transmitter1_charged = is_receiver_charged(receiver1)

	transmitter2_charged = is_receiver_charged(receiver2)

	is_charged = transmitter1_charged or transmitter2_charged


func is_receiver_charged(receiver: RayCast2D) -> bool:
	if receiver.is_colliding():
		var shape: Node = receiver.get_collider().get_parent()
		return shape.is_charged
	
	else:
		return false


func reset() -> void:
	animation = \"discharged\"
	transmitter1_charged = false
	transmitter2_charged = false
	is_charged = false
"

[sub_resource type="DynamicFont" id=1]
size = 11
outline_color = Color( 0, 0, 0, 1 )
font_data = ExtResource( 3 )

[sub_resource type="DynamicFont" id=2]
size = 8
font_data = ExtResource( 5 )

[sub_resource type="DynamicFont" id=3]
size = 8
font_data = ExtResource( 5 )

[node name="MotherPuzzle" type="MarginContainer" groups=[
"main",
]]
anchor_right = 1.0
anchor_bottom = 1.0
custom_constants/margin_right = 70
custom_constants/margin_top = 7
custom_constants/margin_left = 70
custom_constants/margin_bottom = 7
script = ExtResource( 9 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="PopupPanel" type="PopupPanel" parent="."]
visible = true
margin_left = 70.0
margin_top = 7.0
margin_right = 250.0
margin_bottom = 173.0
custom_styles/panel = SubResource( 4 )
popup_exclusive = true

[node name="NinePatchRect" type="NinePatchRect" parent="PopupPanel"]
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 11 )
patch_margin_left = 16
patch_margin_top = 16
patch_margin_right = 16
patch_margin_bottom = 16
__meta__ = {
"_edit_use_anchors_": false
}

[node name="VBoxContainer" type="VBoxContainer" parent="PopupPanel"]
anchor_right = 1.0
anchor_bottom = 1.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="CenterContainer" type="CenterContainer" parent="PopupPanel/VBoxContainer"]
margin_right = 180.0
margin_bottom = 89.0
size_flags_horizontal = 3
size_flags_vertical = 3
__meta__ = {
"_edit_use_anchors_": false
}

[node name="InterestPoints" type="Control" parent="PopupPanel/VBoxContainer/CenterContainer"]
margin_left = 90.0
margin_top = 44.0
margin_right = 90.0
margin_bottom = 44.0

[node name="EnergyOut" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints" instance=ExtResource( 4 )]
position = Vector2( -40, -27 )

[node name="EnergyIn1" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints" instance=ExtResource( 6 )]
position = Vector2( -40, 37 )

[node name="LineShape" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints/EnergyIn1" groups=[
"connectors",
] instance=ExtResource( 8 )]
position = Vector2( 0, -16 )
rotation = 1.5708
frames = SubResource( 7 )
script = SubResource( 8 )

[node name="LineShape2" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints/EnergyIn1" groups=[
"connectors",
] instance=ExtResource( 8 )]
position = Vector2( 16, -16 )
rotation = 1.5708
frames = SubResource( 11 )
script = SubResource( 12 )

[node name="LShape" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints/EnergyIn1" instance=ExtResource( 7 )]
position = Vector2( 0, -32 )
rotation = 1.5708
frames = SubResource( 15 )
flip_v = true
script = SubResource( 16 )

[node name="LShape2" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints/EnergyIn1" instance=ExtResource( 7 )]
position = Vector2( 16, 0 )
rotation = -1.5708
frames = SubResource( 19 )
flip_h = true
script = SubResource( 20 )

[node name="EnergyIn2" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints" instance=ExtResource( 6 )]
position = Vector2( 40, -27 )
rotation = 3.14159

[node name="LineShape" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints/EnergyIn2" groups=[
"connectors",
] instance=ExtResource( 8 )]
position = Vector2( 16, 4.00543e-05 )
frames = SubResource( 23 )
flip_h = true
flip_v = true
script = SubResource( 24 )

[node name="LineShape2" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints/EnergyIn2" groups=[
"connectors",
] instance=ExtResource( 8 )]
position = Vector2( 32.0001, 8.2016e-05 )
flip_h = true
flip_v = true

[node name="LineShape3" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints/EnergyIn2" groups=[
"connectors",
] instance=ExtResource( 8 )]
position = Vector2( 4.57764e-05, -16 )
rotation = 1.5708
frames = SubResource( 27 )
flip_v = true
script = SubResource( 28 )

[node name="EnergyIn3" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints" instance=ExtResource( 6 )]
position = Vector2( 40, 37 )
rotation = -1.5708

[node name="LineShape" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints/EnergyIn3" groups=[
"connectors",
] instance=ExtResource( 8 )]
position = Vector2( 6.10352e-05, -16 )
rotation = -1.5708
frames = SubResource( 31 )
flip_h = true
flip_v = true
script = SubResource( 32 )

[node name="LineShape2" parent="PopupPanel/VBoxContainer/CenterContainer/InterestPoints/EnergyIn3" groups=[
"connectors",
] instance=ExtResource( 8 )]
position = Vector2( 16, 3.05176e-05 )
frames = SubResource( 34 )
flip_h = true
flip_v = true
script = SubResource( 35 )

[node name="Connectors" type="Control" parent="PopupPanel/VBoxContainer/CenterContainer"]
margin_left = 90.0
margin_top = 44.0
margin_right = 90.0
margin_bottom = 44.0

[node name="TShapeConnector" parent="PopupPanel/VBoxContainer/CenterContainer/Connectors" instance=ExtResource( 1 )]
position = Vector2( -23.9999, -11 )
rotation = -3.14159

[node name="TShapeConnector2" parent="PopupPanel/VBoxContainer/CenterContainer/Connectors" instance=ExtResource( 1 )]
position = Vector2( 7.99997, 5.00002 )
rotation = -3.14159

[node name="TShapeConnector3" parent="PopupPanel/VBoxContainer/CenterContainer/Connectors" instance=ExtResource( 1 )]
position = Vector2( -24, 5 )

[node name="TShapeConnector4" parent="PopupPanel/VBoxContainer/CenterContainer/Connectors" instance=ExtResource( 1 )]
position = Vector2( 40, 5 )

[node name="TShapeConnector5" parent="PopupPanel/VBoxContainer/CenterContainer/Connectors" instance=ExtResource( 1 )]
position = Vector2( -8.00003, 5.00002 )

[node name="TShapeConnector6" parent="PopupPanel/VBoxContainer/CenterContainer/Connectors" instance=ExtResource( 1 )]
position = Vector2( -8, -11 )
rotation = 1.5708

[node name="LShapeConnector" parent="PopupPanel/VBoxContainer/CenterContainer/Connectors" instance=ExtResource( 2 )]
position = Vector2( 8.00003, 37 )
rotation = 3.14159

[node name="LShapeConnector3" parent="PopupPanel/VBoxContainer/CenterContainer/Connectors" instance=ExtResource( 2 )]
position = Vector2( -8.00003, -27 )
rotation = 3.14159

[node name="LShape" parent="PopupPanel/VBoxContainer/CenterContainer/Connectors" instance=ExtResource( 7 )]
position = Vector2( -23.9999, -27 )
rotation = 1.5708
frames = SubResource( 38 )
flip_v = true
script = SubResource( 39 )

[node name="LineShape" parent="PopupPanel/VBoxContainer/CenterContainer/Connectors" groups=[
"connectors",
] instance=ExtResource( 8 )]
position = Vector2( 24, 5 )
frames = SubResource( 42 )
script = SubResource( 43 )

[node name="LineShape2" parent="PopupPanel/VBoxContainer/CenterContainer/Connectors" groups=[
"connectors",
] instance=ExtResource( 8 )]
position = Vector2( 7.99995, 21 )
rotation = 1.5708
frames = SubResource( 46 )
script = SubResource( 47 )

[node name="MarginContainer" type="MarginContainer" parent="PopupPanel/VBoxContainer"]
margin_top = 93.0
margin_right = 180.0
margin_bottom = 166.0
custom_constants/margin_right = 10
custom_constants/margin_top = 0
custom_constants/margin_left = 10
custom_constants/margin_bottom = 9

[node name="VBoxContainer2" type="VBoxContainer" parent="PopupPanel/VBoxContainer/MarginContainer"]
margin_left = 10.0
margin_right = 170.0
margin_bottom = 64.0
size_flags_horizontal = 3
custom_constants/separation = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="TextureRect" type="TextureRect" parent="PopupPanel/VBoxContainer/MarginContainer/VBoxContainer2"]
margin_right = 160.0
margin_bottom = 11.0
texture = ExtResource( 12 )

[node name="MarginContainer" type="MarginContainer" parent="PopupPanel/VBoxContainer/MarginContainer/VBoxContainer2/TextureRect"]
anchor_right = 1.0
anchor_bottom = 1.0
rect_min_size = Vector2( 0, 1 )
custom_constants/margin_right = 9
custom_constants/margin_top = -1
custom_constants/margin_left = 8
__meta__ = {
"_edit_use_anchors_": false
}

[node name="HBoxContainer" type="HBoxContainer" parent="PopupPanel/VBoxContainer/MarginContainer/VBoxContainer2/TextureRect/MarginContainer"]
margin_left = 8.0
margin_top = -1.0
margin_right = 151.0
margin_bottom = 16.0
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Label" type="Label" parent="PopupPanel/VBoxContainer/MarginContainer/VBoxContainer2/TextureRect/MarginContainer/HBoxContainer"]
margin_right = 111.0
margin_bottom = 17.0
size_flags_horizontal = 3
custom_fonts/font = SubResource( 1 )
custom_colors/font_color = Color( 0.0901961, 0.0352941, 0.121569, 1 )
text = "Output:"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Button" type="Button" parent="PopupPanel/VBoxContainer/MarginContainer/VBoxContainer2/TextureRect/MarginContainer/HBoxContainer"]
margin_left = 115.0
margin_right = 143.0
margin_bottom = 17.0
focus_mode = 0
size_flags_vertical = 4
custom_fonts/font = SubResource( 2 )
custom_colors/font_color_disabled = Color( 0.0901961, 0.0352941, 0.121569, 1 )
custom_colors/font_color = Color( 0.0901961, 0.0352941, 0.121569, 1 )
custom_colors/font_color_hover = Color( 0.0901961, 0.0352941, 0.121569, 1 )
custom_colors/font_color_pressed = Color( 0.0901961, 0.0352941, 0.121569, 1 )
shortcut_in_tooltip = false
action_mode = 0
enabled_focus_mode = 0
text = "Build"
flat = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Panel" type="NinePatchRect" parent="PopupPanel/VBoxContainer/MarginContainer/VBoxContainer2"]
margin_top = 12.0
margin_right = 160.0
margin_bottom = 64.0
rect_min_size = Vector2( 0, 52 )
size_flags_horizontal = 3
size_flags_vertical = 3
texture = ExtResource( 10 )
region_rect = Rect2( 0, 0, 48, 48 )
patch_margin_left = 16
patch_margin_top = 16
patch_margin_right = 16
patch_margin_bottom = 16
axis_stretch_vertical = 2

[node name="RichTextLabel" type="Label" parent="PopupPanel/VBoxContainer/MarginContainer/VBoxContainer2/Panel"]
margin_right = 156.0
margin_bottom = 17.0
size_flags_vertical = 0
custom_fonts/font = SubResource( 3 )
custom_colors/font_color = Color( 0.847059, 1, 0.839216, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Timer" type="Timer" parent="."]
one_shot = true
[connection signal="pressed" from="PopupPanel/VBoxContainer/MarginContainer/VBoxContainer2/TextureRect/MarginContainer/HBoxContainer/Button" to="." method="_on_Button_pressed"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
